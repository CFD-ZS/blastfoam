/*--------------------------------*- C++ -*----------------------------------*\
  | =========                 |                                                 |
  | \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
  |  \\    /   O peration     | Version:  2.3.0                                 |
  |   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
  |    \\/     M anipulation  |                                                 |
  \*---------------------------------------------------------------------------*/
FoamFile
{
  version     2.0;
  format      ascii;
  class       dictionary;
  object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1; // feet to meters

theta   #calc "5.0*Foam::constant::mathematical::pi/180.0";

x0      0;
x1      1.8;
x2      5.8;

y0      0;
Y1      0.182;
Y2      0.254;

y1      #calc "$Y1*cos($theta)";
y2      #calc "$Y2*cos($theta)";

z0p     0;
z0n     0;
z1p     #calc "$Y1*sin($theta)";
z1n     #calc "-$Y1*sin($theta)";
z2p     #calc "$Y2*sin($theta)";
z2n     #calc "-$Y2*sin($theta)";

vertices
(
    ($x0 $y0 $z0n)
    ($x1 $y0 $z0n)
    ($x2 $y0 $z0n)
    ($x2 $y1 $z1n)
    ($x1 $y1 $z1n)
    ($x1 $y2 $z2n)
    ($x0 $y2 $z2n)
    ($x0 $y1 $z1n)

    ($x0 $y0 $z0p)
    ($x1 $y0 $z0p)
    ($x2 $y0 $z0p)
    ($x2 $y1 $z1p)
    ($x1 $y1 $z1p)
    ($x1 $y2 $z2p)
    ($x0 $y2 $z2p)
    ($x0 $y1 $z1p)
);

dx      0.005;
nx01    #calc "round(($x1 - $x0)/$dx)";
nx12    #calc "round(($x2 - $x1)/$dx)";
ny01    #calc "round(($Y1 - $y0)/$dx)";
ny12    #calc "round(($Y2 - $Y1)/$dx)";
blocks
(
    hex (0 1 4 7 0 1 12 15) ($nx01 $ny01 1) simpleGrading (1 1 1)
    hex (1 2 3 4 1 2 11 12) ($nx12 $ny01 1) simpleGrading (1 1 1)
    hex (7 4 5 6 15 12 13 14) ($nx01 $ny12 1) simpleGrading (1 1 1)
 );

edges
(
    arc 6 14 ($x0 $Y2 0)
    arc 5 13 ($x1 $Y2 0)
    arc 4 12 ($x1 $Y1 0)
    arc 3 11 ($x2 $Y1 0)
);

boundary
(
    walls
    {
        type wall;
        faces
        (
            (3 4 12 11)
            (4 5 13 12)
            (5 6 14 13)
            (7 6 14 15)
            (0 7 15 0)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (2 3 11 2)
        );
    }

    front
    {
        type wedge;
        faces
        (
            (0 1 12 15)
            (1 2 11 12)
            (15 12 13 14)
        );
    }
    back
    {
        type wedge;
        faces
        (
            (0 1 4 7)
            (1 2 3 4)
            (7 4 5 6)
        );
    }
 );

mergePatchPairs
(
);

// ************************************************************************* //
